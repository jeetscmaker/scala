object HelloWorld {
  def main(args: Array[String]): Unit = {
    println("Hello, world!")
  }
}
The structure of this program should be familiar to Java programmers: it consists of one method called
main which takes the command line arguments, an array of strings, as parameter; the body of this method
consists of a single call to the predefined method println with the friendly greeting as argument.
The main method does not return a value. Therefore, its return type is declared as Unit.

What is less familiar to Java programmers is the object declaration containing the main method. Such a
declaration introduces what is commonly known as a singleton object, that is a class with a single instance.
The declaration above thus declares both a class called HelloWorld and an instance of that class, also
called HelloWorld. This instance is created on demand, the first time it is used.

The astute reader might have noticed that the main method is not declared as static here. This is because
static members (methods or fields) do not exist in Scala. Rather than defining static members, the Scala
programmer declares these members in singleton objects.